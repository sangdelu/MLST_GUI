import os
from Bio.Blast.Applications import NcbiblastxCommandline


# Execute local NCBI-Blast+ from python 3.6 (blast+ installed on linux)

# in_path, out_path, seed_name, res_name
def local_blast(ref_gen, out_path, seed_name, res_name):
    """
    Use blast to do nucleotide blast.
    Please do all the work in path of out!

    @ parameter:
    ref_gen: string, path of directory, where reference genomes are.
    seed_name: string, name of a fasta file containing all seeds.
    ref_database: string, name of reference database generated by makdblastdb.
    res_name: string, name of result file of blast.

    @ return:
    string, path containing result file of blast.
    """
    ref_out = ref_gen + seed_name[:-6] + '_ref.fasta'
    ref_genomes = merge_fasta(ref_gen, ref_out)
    ref_database = build_ref(ref_genomes, ref_out)
    res = do_blastn(ref_database, ref_gen + seed_name, out_path + res_name)
    return res


def merge_fasta(in_path, ref_out):
    """
    Merge several .fna fines into one .fasta file.

    @ return:
    string, path of .fasta file.
    """
    res = ''
    if not in_path.endswith('/'):
        print('This path should look like user/test/, don not forget last /! Please try again.')
    else:
        cmd = ['cat ' + in_path + '*.fna > ' + ref_out, 'find '+ref_out]
        for c in cmd:
            res = os.popen(c).read()
            print(res)
    return res[:-1]


def build_ref(ref_genomes, ref_database):
    """
    Use blast to build local reference database.
    makeblastdb: 2.6.0+
    Package: blast 2.6.0

    @ parameter:
    ref_genomes: string, path of reference genomes which are in fasta format.
    ref_database: string, path of generated ref_database

    @ return:
    string, path of result database.
    """
    cmd = 'makeblastdb -in ' + ref_genomes + ' -dbtype nucl -out ' + ref_database
    os.popen(cmd).read()
    return ref_database


def do_blastn(ref_database, seeds, out):
    """
    Execute neucleotide blast (blastn) of seeds against reference database.

    @ parameter:
    ref_database: string, path of reference database.
    seeds: string, path of a fasta file containing all seeds.
    out: string, path of result xml file.

    @ return:
    string, path containing result file of blast.
    """
    cmd = ['blastn -task blastn-short -query ' + seeds + ' -db ' + ref_database + ' -out ' + out + ' -evalue 0.001 -outfmt 5',
        'find ' + out]
    for c in cmd:
        res = os.popen(c).read()[:-1]
        print(res)
    return res
